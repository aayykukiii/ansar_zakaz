from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, Message
from aiogram.fsm.context import FSMContext
from states.mebel_bron import BronForm
from database import crud
from config import ID_ADMIN
import re

router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data.startswith("cat:"))
async def handle_category(callback: CallbackQuery):
    data = callback.data.split(":")[1]

    if data == "about":
        await callback.message.answer(
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "üè¢ –ö–æ–º–ø–∞–Ω–∏—è –ø–æ –ø—Ä–æ–¥–∞–∂–µ –º–µ–±–µ–ª–∏\n"
            "üìç –ì—Ä–æ–∑–Ω—ã–π, —É–ª. –ú–µ–±–µ–ª—å–Ω–∞—è, 10\n"
            "üì± +7 (995) 800-89-95"
        )
        await callback.answer()
        return

    # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcats = {
        "—Å–ø–∞–ª—å–Ω–∞—è": ["üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è", "üõè –ö—Ä–æ–≤–∞—Ç–∏"],
        "–∫—É—Ö–æ–Ω–Ω–∞—è": ["üìê –ü—Ä—è–º–∞—è", "üîΩ –£–≥–ª–æ–≤–∞—è"],
        "–º—è–≥–∫–∞—è": ["üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"],
        "—Å—Ç–æ–ª—ã": ["üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"],
        "—Ç—É–º–±—ã": ["üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"],
        "–º–∞—Ç—Ä–∞—Å—ã": ["üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"],
        "—à–∫–∞—Ñ—ã": ["üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"]
    }

    if data not in subcats:
        await callback.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        await callback.answer()
        return

    buttons = [
        [InlineKeyboardButton(text=sub, callback_data=f"subcat:{data}:{sub.split()[1].lower()}")]
        for sub in subcats[data]
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥")])

    await callback.message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.capitalize()}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer()

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
@router.callback_query(F.data.startswith("subcat:"))
async def handle_subcat(callback: CallbackQuery):
    _, cat_code, subcat_code = callback.data.split(":")

    # –í–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (cat_code, subcat_code) == ("–º—è–≥–∫–∞—è", "—Ä–æ—Å—Å–∏–π—Å–∫–∞—è"):
        buttons = [
            [InlineKeyboardButton(text="–ü—Ä—è–º–∞—è", callback_data="subsub:–º—è–≥–∫–∞—è:—Ä–æ—Å—Å–∏–π—Å–∫–∞—è:–ø—Ä—è–º–∞—è")],
            [InlineKeyboardButton(text="–£–≥–ª–æ–≤–∞—è", callback_data="subsub:–º—è–≥–∫–∞—è:—Ä–æ—Å—Å–∏–π—Å–∫–∞—è:—É–≥–ª–æ–≤–∞—è")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cat:–º—è–≥–∫–∞—è")]
        ]
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º—è–≥–∫–æ–π –º–µ–±–µ–ª–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        await callback.answer()
        return

    await show_products(callback, cat_code, subcat_code)

# –í–ª–æ–∂–µ–Ω–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
@router.callback_query(F.data.startswith("subsub:"))
async def handle_subsub(callback: CallbackQuery):
    _, cat_code, subcat_code, subsub = callback.data.split(":")
    await show_products(callback, cat_code, f"{subcat_code}_{subsub}")

# –ù–∞–∑–∞–¥
@router.callback_query(F.data == "–Ω–∞–∑–∞–¥")
async def handle_back(callback: CallbackQuery):
    from handlers.commands import start_cmd
    await start_cmd(callback.message)
    await callback.answer()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
async def show_products(callback: CallbackQuery, cat_code: str, subcat: str):
    category_map = {
        "–º—è–≥–∫–∞—è": "üõã –ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å",
        "–∫—É—Ö–æ–Ω–Ω–∞—è": "üç≥ –ö—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å",
        "—Å–ø–∞–ª—å–Ω–∞—è": "üõè –°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å",
        "—Å—Ç–æ–ª—ã": "üìö –°—Ç–æ–ª—ã –∏ —Å—Ç—É–ª—å—è",
        "—Ç—É–º–±—ã": "üì∫ –¢—É–º–±—ã –∏ –∫–æ–º–æ–¥—ã",
        "–º–∞—Ç—Ä–∞—Å—ã": "üõè –ú–∞—Ç—Ä–∞—Å—ã",
        "—à–∫–∞—Ñ—ã": "üö™ –®–∫–∞—Ñ—ã"
    }

    category_name = category_map.get(cat_code)
    categories = crud.get_categories()
    category = next((c for c in categories if c["name"] == category_name), None)
    if not category:
        await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return

    products = crud.get_products_by_category(category["id"], subcat)
    if not products:
        await callback.message.answer("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        await callback.answer()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"{p['title']} ‚Äî {p['price']}‚ÇΩ", callback_data=f"prod:{p['id']}")]
        for p in products
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥")]])

    await callback.message.answer("üì¶ –¢–æ–≤–∞—Ä—ã:", reply_markup=kb)
    await callback.answer()

# –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("prod:"))
async def product_card(callback: CallbackQuery):
    prod_id = int(callback.data.split(":")[1])
    product = crud.get_product(prod_id)

    if not product:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    media = []
    for i in range(1, 5):
        img = product.get(f'image{i}')
        if img:
            media.append(InputMediaPhoto(media='https://www.bing.com/images/search?view=detailV2&ccid=aO7k18o4&id=FB1A3A6CB720D534B07F4D4130CFE240082862B4&thid=OIP.aO7k18o4aIbowjYfn4d-xAHaG2&mediaurl=https%3a%2f%2fe7.pngegg.com%2fpngimages%2f203%2f108%2fpng-clipart-cat-pixel-art-stardew-valley-cat-animals-black.png&cdnurl=https%3a%2f%2fth.bing.com%2fth%2fid%2fR.68eee4d7ca386886e8c2361f9f877ec4%3frik%3dtGIoCEDizzBBTQ%26pid%3dImgRaw%26r%3d0&exph=833&expw=900&q=pictures+150+x+150&FORM=IRPRST&ck=0DB17AE765DC7369433AA24BF504173D&selectedIndex=79&itb=0&ajaxhist=0&ajaxserp=0'))

    if media:
        if len(media) == 1:
            await callback.message.answer_photo(media[0].media)
        else:
            await callback.message.answer_media_group(media)

    text = (
        f"<b>{product['title']}</b>\n\n"
        f"{product.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
        f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {product.get('country', '‚Äî')}\n"
        f"üìè <b>–†–∞–∑–º–µ—Ä—ã:</b> {product.get('size', '‚Äî')}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product.get('price')} ‚ÇΩ"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"chat:{prod_id}")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data=f"consult:{prod_id}")],
        [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"bron:{prod_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥")]
    ])

    await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()

# –ó–∞–∫–∞–∑ ‚Äî FSM
@router.callback_query(F.data.startswith("bron:"))
async def start_bron(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split(":")[1])
    await state.update_data(product_id=product_id)
    await state.set_state(BronForm.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await callback.answer()

@router.message(BronForm.waiting_for_name)
async def bron_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(BronForm.waiting_for_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")

@router.message(BronForm.waiting_for_phone)
async def bron_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not re.match(r"^\+7\d{10}$", phone):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ø—Ä–∏–º–µ—Ä: +79991234567)")
        return
    await state.update_data(phone=phone)
    await state.set_state(BronForm.waiting_for_comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –Ω–µ–≥–æ):")

@router.message(BronForm.waiting_for_comment)
async def bron_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    comment = message.text if message.text != "-" else ""

    crud.create_order(
        user_id=message.from_user.id,
        name=data["name"],
        phone=data["phone"],
        product_id=data["product_id"],
        comment=comment
    )

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è.")
    await message.bot.send_message(
        ID_ADMIN,
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üì¶ –¢–æ–≤–∞—Ä ID: {data['product_id']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    )

    await state