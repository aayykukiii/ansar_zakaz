from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from database import crud
from handlers.commands import start_cmd
import re
from states.mebel_bron import BronForm

router = Router()

@router.callback_query(F.data.startswith("cat:"))
async def handle_category(callback: CallbackQuery, state: FSMContext):
    code = callback.data.split(":", 1)[1]

    subcats_map = {
        "spalnaya": ["ru", "tr"],
        "kuhonnaya": ["pryamaya", "uglovaya"],
        "myagkaya": ["ru", "tr"],
        "krovati": ["ru", "tr"],
    }
    categories_without_subcats = {"stoly_stulya", "tumby_komody", "matrasy", "shkafy"}

    if code == "about":
        await callback.message.answer(
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "üè¢ –ö–æ–º–ø–∞–Ω–∏—è –ø–æ –ø—Ä–æ–¥–∞–∂–µ –º–µ–±–µ–ª–∏\n"
            "üìç –ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏\n"
            "üì± +7 (995) 800‚Äë89‚Äë95"
        )
        await callback.answer()
        return

    if code in categories_without_subcats:
        cat = crud.get_category_by_code(code)
        if cat:
            await show_products(callback, cat.id, subcat=None)
        else:
            await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return

    if code not in subcats_map:
        await callback.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        await callback.answer()
        return

    buttons = []
    for sub in subcats_map[code]:
        if code in ("spalnaya", "myagkaya", "krovati"):
            txt = "üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è" if sub == "ru" else "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"
        elif code == "kuhonnaya":
            txt = "üìê –ü—Ä—è–º–∞—è" if sub == "pryamaya" else "üîΩ –£–≥–ª–æ–≤–∞—è"
        else:
            txt = sub
        cb = f"subcat:{code}:{sub}"
        buttons.append([InlineKeyboardButton(text=txt, callback_data=cb)])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")])

    await callback.message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {code.replace('_', ' ').capitalize()}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback.answer()

@router.callback_query(F.data.startswith("subcat:"))
async def handle_subcat(callback: CallbackQuery, state: FSMContext):
    _, cat_code, sub_code = callback.data.split(":", 2)
    cat = crud.get_category_by_code(cat_code)
    if not cat:
        await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return
    await show_products(callback, cat.id, subcat=sub_code)

@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery):
    await start_cmd(callback.message)
    await callback.answer()

async def show_products(callback: CallbackQuery, category_id: int, subcat: str = None):
    products = crud.get_products_by_category(category_id, subcat=subcat)
    if not products:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        await callback.message.answer("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=kb)
        await callback.answer()
        return

    buttons = [[InlineKeyboardButton(text=f"{p.title} ‚Äî {p.price}‚ÇΩ", callback_data=f"prod:{p.id}")] for p in products]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    try:
        await callback.message.edit_reply_markup(reply_markup=kb)
    except:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("prod:"))
async def product_card(callback: CallbackQuery, state: FSMContext):
    prod_id = int(callback.data.split(":", 1)[1])
    product = crud.get_product(prod_id)
    if not product:
        await callback.message.answer('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await callback.answer()
        return

    media = []
    for img in (product.image1, product.image2, product.image3, product.image4):
        if img:
            media.append(InputMediaPhoto(media=img))
    if media:
        if len(media) == 1:
            await callback.message.answer_photo(media[0].media)
        else:
            await callback.message.answer_media_group(media)

    text = (
        f"<b>{product.title}</b>\n\n"
        f"{product.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {product.country or '‚Äî'}\n"
        f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {product.size or '‚Äî'}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product.price or '‚Äî'} ‚ÇΩ"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"chat:{product.id}")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data=f"consult:{product.id}")],
        [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"bron:{product.id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])
    await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("bron:"))
async def start_bron(callback: CallbackQuery, state: FSMContext):
    prod_id = int(callback.data.split(":", 1)[1])
    await state.update_data(product_id=prod_id)
    await state.set_state(BronForm.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await callback.answer()

# FSM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–µ–π:

@router.message(BronForm.waiting_for_name)
async def bron_name(message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(BronForm.waiting_for_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567):")

@router.message(BronForm.waiting_for_phone)
async def bron_phone(message, state: FSMContext):
    phone = message.text.strip()
    if not re.match(r"^\+7\d{10}$", phone):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(phone=phone)
    await state.set_state(BronForm.waiting_for_comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑):")

@router.message(BronForm.waiting_for_comment)
async def bron_comment(message, state: FSMContext):
    data = await state.get_data()
    comment = message.text if message.text != "-" else ""
    crud.create_order(
        user_id=message.from_user.id,
        name=data["name"],
        phone=data["phone"],
        product_id=data["product_id"],
        comment=comment
    )
    product = crud.get_product(data["product_id"])
    await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω: <b>{product.title}</b>", parse_mode="HTML")
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    from config import ID_ADMIN
    await message.bot.send_message(
        chat_id=ID_ADMIN,
        text=(
            f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
            f"–ò–º—è: {data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"–¢–æ–≤–∞—Ä: {product.title}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}"
        )
    )
    await state.clear()
