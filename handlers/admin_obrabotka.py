from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from database import crud
from states.admin_states import AddProductFSM, AddCategoryFSM
from handlers.client_panel import start_cmd

router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
@router.callback_query(F.data == "admin_add_category")
async def add_category_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(AddCategoryFSM.waiting_for_name)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_back")]
    ])
    text = (
        "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–±–µ–ª–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n"
        "üîπ –°–æ–≤–µ—Ç: –¥–æ–±–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è ‚Äî —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—é –∑–∞–º–µ—Ç–Ω–µ–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "üõèÔ∏è –°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å\n"
        "üç≥ –ö—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å\n"
        "üõãÔ∏è –ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å\n"
        "üìö –°—Ç–æ–ª—ã –∏ —Å—Ç—É–ª—å—è\n"
        "üì∫ –¢—É–º–±—ã –∏ –∫–æ–º–æ–¥—ã\n"
        "üõèÔ∏è –ö—Ä–æ–≤–∞—Ç–∏\n"
        "üõèÔ∏è –ú–∞—Ç—Ä–∞—Å—ã\n"
        "üö™ –®–∫–∞—Ñ—ã\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª."
    )
    await callback.message.answer(text, reply_markup=kb)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã / –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await start_cmd(callback.message)
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(AddCategoryFSM.waiting_for_name)
async def process_category_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ùóÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∏–º–µ–Ω–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
    code = name.lower().replace(" ", "_")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
    existing = crud.get_category_by_code(code)
    if existing:
        await message.answer("‚ùóÔ∏è –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    cat = crud.add_category(name=name, code=code, parent_id=None)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{cat.name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", parse_mode="HTML")
    await state.clear()
    await start_cmd(message)

# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–±–µ–ª–∏ ======

@router.callback_query(F.data == "admin_add_product")
async def add_product_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(AddProductFSM.waiting_for_title)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    await callback.message.answer("üõã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb)
    await callback.answer()
    

@router.message(AddProductFSM.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    title = message.text.strip()
    if not title:
        await message.answer("‚ùóÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(title=title)

    categories = crud.get_categories(parent_id=None)
    if not categories:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ. –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    buttons = [
        [InlineKeyboardButton(text=cat.name, callback_data=f"admin_cat_select:{cat.id}")]
        for cat in categories
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await state.set_state(AddProductFSM.waiting_for_category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)


@router.callback_query(F.data.startswith("admin_cat_select:"))
async def process_category(callback: CallbackQuery, state: FSMContext):
    cat_id = int(callback.data.split(":", 1)[1])
    category = crud.get_category_by_id(cat_id)
    if not category:
        await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await callback.answer()
        return

    await state.update_data(category_id=cat_id)

    subcats = crud.get_categories(parent_id=cat_id)
    if subcats:
        kb = InlineKeyboardMarkup(row_width=1)
        for sub in subcats:
            kb.insert(InlineKeyboardButton(text=sub.name, callback_data=f"admin_subcat_select:{sub.id}"))
        kb.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
        await state.set_state(AddProductFSM.waiting_for_subcategory)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    else:
        await state.update_data(subcategory=None)
        await state.set_state(AddProductFSM.waiting_for_country)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:", reply_markup=kb)

    await callback.answer()

@router.callback_query(F.data.startswith("admin_subcat_select:"))
async def process_subcategory(callback: CallbackQuery, state: FSMContext):
    subcat_id = int(callback.data.split(":", 1)[1])
    subcat = crud.get_category_by_id(subcat_id)
    if not subcat:
        await callback.message.answer("‚ùå –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await callback.answer()
        return

    await state.update_data(subcategory=subcat.code)
    await state.set_state(AddProductFSM.waiting_for_country)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]])
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:", reply_markup=kb)
    await callback.answer()

@router.message(AddProductFSM.waiting_for_country)
async def process_country(message: Message, state: FSMContext):
    country = message.text.strip()
    if not country:
        await message.answer("‚ùóÔ∏è –°—Ç—Ä–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(country=country)

    await state.set_state(AddProductFSM.waiting_for_type)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä—è–º–∞—è, —É–≥–ª–æ–≤–∞—è):", reply_markup=kb)

@router.message(AddProductFSM.waiting_for_type)
async def process_type(message: Message, state: FSMContext):
    type_ = message.text.strip()
    if not type_:
        await message.answer("‚ùóÔ∏è –¢–∏–ø –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(type_=type_)

    await state.set_state(AddProductFSM.waiting_for_price)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", reply_markup=kb)

@router.message(AddProductFSM.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    price_text = message.text.strip()
    if not price_text.isdigit():
        await message.answer("‚ùóÔ∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    price = int(price_text)
    await state.update_data(price=price)

    await state.set_state(AddProductFSM.waiting_for_size)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 200x150):", reply_markup=kb)

@router.message(AddProductFSM.waiting_for_size)
async def process_size(message: Message, state: FSMContext):
    size = message.text.strip()
    if not size:
        await message.answer("‚ùóÔ∏è –†–∞–∑–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(size=size)

    await state.set_state(AddProductFSM.waiting_for_description)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb)

@router.message(AddProductFSM.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    description = message.text.strip()
    await state.update_data(description=description)

    await state.set_state(AddProductFSM.waiting_for_images)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="admin_finish_product")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ). "
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª.", 
        reply_markup=kb
    )

@router.message(AddProductFSM.waiting_for_images, F.content_type == "photo")
async def process_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    images = data.get("images", [])
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    images.append(photo.file_id)
    await state.update_data(images=images)
    await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(images)} —à—Ç.). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.")

@router.callback_query(F.data == "admin_finish_product")
async def finish_adding_product(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    required_fields = ["title", "category_id", "country", "type_", "price", "size", "description"]
    if not all(field in data for field in required_fields):
        await callback.message.answer("‚ùóÔ∏è –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await callback.answer()
        return

    images = data.get("images", [])
    # –ë–µ—Ä—ë–º –¥–æ 4 —Ñ–æ—Ç–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    images = images[:4]

    product = crud.add_product(
        title=data["title"],
        category_id=data["category_id"],
        subcategory=data.get("subcategory"),
        country=data["country"],
        type_=data["type_"],
        price=data["price"],
        images=images,
        description=data["description"],
        size=data["size"]
    )

    await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä <b>{product.title}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="HTML")
    await state.clear()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é (–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã)
    await start_cmd(callback.message)
    await callback.answer()


# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "admin_list_categories")
async def list_categories(callback: CallbackQuery):
    categories = crud.get_categories(parent_id=None)
    if not categories:
        await callback.message.answer("üìÇ‚ÄØ–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
        await callback.answer()
        return

    text = "üìÇ‚ÄØ–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"
    for cat in categories:
        text += f"‚Ä¢ {cat.name} (ID: {cat.id})\n"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    await callback.message.answer(text, reply_markup=kb)
    await callback.answer()

# –ó–∞—è–≤–∫–∏ (orders)
@router.callback_query(F.data == "admin_show_orders")
async def show_orders(callback: CallbackQuery):
    orders = crud.get_orders()
    if not orders:
        await callback.message.answer("üìã‚ÄØ–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        await callback.answer()
        return

    for o in orders:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–í —Ä–∞–±–æ—Ç—É", callback_data=f"admin_order:{o.id}:work"),
                InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç–∞", callback_data=f"admin_order:{o.id}:close")
            ]
        ])
        text = (
            f"ID: {o.id}\n"
            f"–ò–º—è: {o.name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {o.phone}\n"
            f"–¢–æ–≤–∞—Ä: {o.product.title}\n"
            f"–°—Ç–∞—Ç—É—Å: {o.status}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {o.comment or '‚Äî'}\n"
        )
        await callback.message.answer(text, reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("admin_order:"))
async def change_order_status(callback: CallbackQuery):
    parts = callback.data.split(":")
    if len(parts) < 3:
        await callback.message.answer("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        await callback.answer()
        return
    order_id = int(parts[1])
    action = parts[2]
    order = crud.get_order(order_id)
    if not order:
        await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    if action == "work":
        crud.update_order_status(order.id, "–í —Ä–∞–±–æ—Ç–µ")
        new_status = "–í —Ä–∞–±–æ—Ç–µ"
    elif action == "close":
        crud.update_order_status(order.id, "–ó–∞–∫—Ä—ã—Ç–∞")
        new_status = "–ó–∞–∫—Ä—ã—Ç–∞"
    else:
        await callback.answer()
        return

    await callback.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ¬´{new_status}¬ª.")
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–±–µ–ª–∏ ‚Äì –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –∏–ª–∏ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫
@router.callback_query(F.data == "admin_delete_product")
async def delete_product(callback: CallbackQuery):
    products = crud.get_all_products()
    if not products:
        await callback.message.answer("üóë –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback.answer()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {p.title}", callback_data=f"admin_delete:{p.id}")]
        for p in products
    ] + [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])
    await callback.message.answer("üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("admin_delete:"))
async def perform_delete(callback: CallbackQuery):
    prod_id = int(callback.data.split(":", 1)[1])
    success = crud.delete_product(prod_id)
    if success:
        await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä ID‚ÄØ{prod_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä ID‚ÄØ{prod_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.")
    await callback.answer()
