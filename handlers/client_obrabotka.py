from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, Message
from aiogram.fsm.context import FSMContext
from states.mebel_bron import BronForm
from database import crud
from config import ID_ADMIN
from handlers.client_panel import start_cmd
import re

router = Router()

@router.callback_query(F.data.startswith("cat:"))
async def handle_category(callback: CallbackQuery):
    data = callback.data.split(":")[1]

    categories_without_subcats = {"—Å—Ç–æ–ª—ã", "—Ç—É–º–±—ã", "–º–∞—Ç—Ä–∞—Å—ã", "—à–∫–∞—Ñ—ã"}
    subcats = {
        "—Å–ø–∞–ª—å–Ω–∞—è": ["üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"],
        "–∫—É—Ö–æ–Ω–Ω–∞—è": ["üìê –ü—Ä—è–º–∞—è", "üîΩ –£–≥–ª–æ–≤–∞—è"],
        "–º—è–≥–∫–∞—è": ["üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"],
        "–∫—Ä–æ–≤–∞—Ç–∏": ["üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è", "üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è"],
    }

    if data == "about":
        await callback.message.answer(
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "üè¢ –ö–æ–º–ø–∞–Ω–∏—è –ø–æ –ø—Ä–æ–¥–∞–∂–µ –º–µ–±–µ–ª–∏\n"
            "üìç –ì—Ä–æ–∑–Ω—ã–π, —É–ª. –ú–µ–±–µ–ª—å–Ω–∞—è, 10\n"
            "üì± +7 (995) 800-89-95"
        )
        await callback.answer()
        return

    if data in categories_without_subcats:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ë–î –ø–æ –∏–º–µ–Ω–∏ —Å emoji
        categories = crud.get_categories()
        category = next((c for c in categories if c.name.lower() == data), None)
        if category:
            await show_products(callback, category.id, subcat="")
        else:
            await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return

    if data not in subcats:
        await callback.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        await callback.answer()
        return

    buttons = [
        [InlineKeyboardButton(text=sub, callback_data=f"subcat:{data}:{sub.split()[1].lower()}")]
        for sub in subcats[data]
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥")])

    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.capitalize()}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("subcat:"))
async def handle_subcat(callback: CallbackQuery):
    try:
        _, cat_code, subcat_code = callback.data.split(":", maxsplit=2)
    except ValueError:
        await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await callback.answer()
        return

    categories = crud.get_categories()
    category = next((c for c in categories if c.name.lower() == cat_code), None)
    if not category:
        await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return

    await show_products(callback, category.id, subcat_code)

@router.callback_query(F.data == "–Ω–∞–∑–∞–¥")
async def handle_back(callback: CallbackQuery):
    await start_cmd(callback.message)
    await callback.answer()

async def show_products(callback: CallbackQuery, category_id: int, subcat: str):
    products = crud.get_products_by_category(category_id, subcat)

    if not products:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥")]
        ])
        await callback.message.answer("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=kb)
        await callback.answer()
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(f"{p.title} ‚Äî {p.price}‚ÇΩ", callback_data=f"prod:{p.id}")]
        for p in products
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥")]])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_reply_markup, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —á–∞—Ç
    try:
        await callback.message.edit_reply_markup(reply_markup=kb)
    except:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("prod:"))
async def product_card(callback: CallbackQuery):
    try:
        prod_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞.")
        await callback.answer()
        return

    product = crud.get_product(prod_id)

    if not product:
        await callback.message.answer('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await callback.answer()
        return

    media = []
    for i in range(1, 5):
        image = getattr(product, f"image{i}", None)
        if image:
            media.append(InputMediaPhoto(media=image))

    if media:
        if len(media) == 1:
            await callback.message.answer_photo(media[0].media)
        else:
            await callback.message.answer_media_group(media)

    text = (
        f"<b>{product.title}</b>\n\n"
        f"{product.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {product.country or '‚Äî'}\n"
        f"üìè <b>–†–∞–∑–º–µ—Ä—ã:</b> {product.size or '‚Äî'}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {product.price} ‚ÇΩ"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"chat:{product.id}")],
        [InlineKeyboardButton(text="üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data=f"consult:{product.id}")],
        [InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"bron:{product.id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="–Ω–∞–∑–∞–¥")]
    ])

    await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("bron:"))
async def start_bron(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞.")
        await callback.answer()
        return

    await state.update_data(product_id=product_id)
    await state.set_state(BronForm.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await callback.answer()


@router.message(BronForm.waiting_for_name)
async def bron_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(BronForm.waiting_for_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")

@router.message(BronForm.waiting_for_phone)
async def bron_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not re.match(r"^\+7\d{10}$", phone):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ø—Ä–∏–º–µ—Ä: +79991234567)")
        return
    await state.update_data(phone=phone)
    await state.set_state(BronForm.waiting_for_comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –Ω–µ–≥–æ):")

@router.message(BronForm.waiting_for_comment)
async def bron_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    comment = message.text if message.text != "-" else ""

    crud.create_order(
        user_id=message.from_user.id,
        name=data["name"],
        phone=data["phone"],
        product_id=data["product_id"],
        comment=comment
    )

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è.")
    await message.bot.send_message(
        chat_id=ID_ADMIN,
        text=(
            f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üõç –¢–æ–≤–∞—Ä: {crud.get_product(data['product_id']).title}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}"
        )
    )

    await state.clear()